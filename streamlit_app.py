
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import re
from collections import defaultdict, Counter

st.set_page_config(page_title="Ph√¢n T√≠ch Roulette", layout="centered")
st.title("üé∞ Ph√¢n T√≠ch Roulette Theo Nh√≥m A/B/C/D + T√° nh√≥m + C·ªôt")

# ==== C·∫•u h√¨nh nh√≥m ====
group_map = {
    'A': [0, 2, 4, 15, 17, 19, 21, 25, 32, 34],
    'B': [6, 8, 10, 11, 13, 23, 27, 30, 36],
    'C': [1, 5, 9, 14, 16, 20, 24, 31, 33],
    'D': [3, 7, 12, 18, 22, 26, 28, 29, 35],
}

column_map = {
    'C1': [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34],
    'C2': [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35],
    'C3': [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36],
}

def find_group(num):
    for group, numbers in group_map.items():
        if num in numbers:
            return group
    return "?"

def find_dozen(num):
    if 1 <= num <= 12:
        return "T1"
    elif 13 <= num <= 24:
        return "T2"
    elif 25 <= num <= 36:
        return "T3"
    else:
        return "T0"

def find_column(num):
    for col, nums in column_map.items():
        if num in nums:
            return col
    return "C0"

# ==== Nh·∫≠p d·ªØ li·ªáu & ch·ªçn ph∆∞∆°ng ph√°p ====
results = st.text_input("Nh·∫≠p d√£y s·ªë Roulette (c√°ch nhau b·ªüi d·∫•u c√°ch ho·∫∑c ph·∫©y):", "29,21,15,1,0,2,1")
method = st.radio("üîç Ch·ªçn c√°ch g·ª£i √Ω c∆∞·ª£c", [
    "üß† Voting k·∫øt h·ª£p nh√≥m A/B/C/D + T1/T2/T3 + C·ªôt"
    "1Ô∏è‚É£ G·∫ßn nh·∫•t + Nh√≥m √≠t nh·∫•t",
    "2Ô∏è‚É£ G·∫ßn nh·∫•t + Nh√≥m ch∆∞a xu·∫•t hi·ªán g·∫ßn ƒë√¢y",
    "3Ô∏è‚É£ G·ª£i √Ω theo c√¢n b·∫±ng nh√≥m",
    "4Ô∏è‚É£ M·∫´u l·∫∑p A-x-A ho·∫∑c A-A-x",
    "üîü Markov Chain: x√°c su·∫•t chuy·ªÉn nh√≥m",

])

numbers = [int(x) for x in re.findall(r'\d+', results)]
data = pd.DataFrame({"S·ªë": numbers})
data["Nh√≥m"] = data["S·ªë"].apply(find_group)
data["T√° nh√≥m"] = data["S·ªë"].apply(find_dozen)
data["C·ªôt"] = data["S·ªë"].apply(find_column)
data["Chu k·ª≥ 5 tay"] = (data.index // 5) + 1

# ==== T√≠nh Markov n·∫øu c·∫ßn ====
markov_matrix = defaultdict(lambda: defaultdict(int))
markov_prob = {}
for i in range(len(data) - 1):
    from_g = data.loc[i, "Nh√≥m"]
    to_g = data.loc[i + 1, "Nh√≥m"]
    markov_matrix[from_g][to_g] += 1
for from_g, targets in markov_matrix.items():
    total = sum(targets.values())
    markov_prob[from_g] = {to_g: round(count / total, 2) for to_g, count in targets.items()}

# ==== H√†m Voting m·ªü r·ªông ====
def vote_strategy(i, data, markov_prob):
    if i == 0:
        return "‚Äî"
    votes = []

    prev = data.loc[i - 1, "Nh√≥m"]
    prev_t = data.loc[i - 1, "T√° nh√≥m"]
    prev_c = data.loc[i - 1, "C·ªôt"]
    freq = data.loc[:i - 1, "Nh√≥m"].value_counts()
    t_freq = data.loc[:i - 1, "T√° nh√≥m"].value_counts()
    c_freq = data.loc[:i - 1, "C·ªôt"].value_counts()
    least = freq.idxmin()
    least_t = t_freq.idxmin()
    least_c = c_freq.idxmin()

    votes += [prev, least] if prev != least else [prev]
    votes += [prev_t, least_t] if prev_t != least_t else [prev_t]
    votes += [prev_c, least_c] if prev_c != least_c else [prev_c]

    recent = data.loc[max(0, i - 10):i - 1, "Nh√≥m"]
    missing = [g for g in group_map if g not in recent.values]
    if missing:
        votes.append(missing[0])

    prob_dict = markov_prob.get(prev, {})
    if prob_dict:
        best = max(prob_dict.items(), key=lambda x: x[1])[0]
        votes.append(best)

    vote_count = Counter(votes)
    top_votes = vote_count.most_common(2)
    return " + ".join([v[0] for v in top_votes])

# ==== G·ª£i √Ω v√† ƒë√°nh gi√° ====
suggestions, hits = [], []
for i in range(len(data)):
    if i == 0:
        suggestions.append("‚Äî")
        hits.append("‚ö™")
        continue
    sugg = vote_strategy(i, data, markov_prob)
    actual = data.loc[i, "Nh√≥m"]
    hit = "üü¢" if actual in sugg else "üî¥"
    suggestions.append(sugg)
    hits.append(hit)

data["G·ª£i √Ω tr∆∞·ªõc"] = suggestions
data["K·∫øt qu·∫£"] = hits

# ==== Hi·ªÉn th·ªã k·∫øt qu·∫£ ====
st.subheader("üìã B·∫£ng k·∫øt qu·∫£ chi ti·∫øt")
st.dataframe(data)

# ==== Hi·ªÉn th·ªã b·∫£ng Baccarat-style ====
st.subheader("üéØ B·∫£ng c·∫ßu Baccarat-style")

results_seq = data["K·∫øt qu·∫£"].tolist()
columns = []
col = []
last = None

for r in results_seq:
    if r == last:
        col.append(r)
    else:
        if col:
            columns.append(col)
        col = [r]
        last = r
if col:
    columns.append(col)

max_len = max(len(c) for c in columns) if columns else 1
fig, ax = plt.subplots(figsize=(len(columns), max_len))
ax.axis('off')

for x, col in enumerate(columns):
    for y, val in enumerate(col):
        color = "#4CAF50" if val == 'üü¢' else "#F44336"
        ax.add_patch(plt.Rectangle((x, -y), 1, 1, color=color))
        ax.text(x + 0.5, -y + 0.5, val, va='center', ha='center', fontsize=16, color='white')

plt.xlim(0, len(columns))
plt.ylim(-max_len, 1)
plt.tight_layout()
st.pyplot(fig)
# ==== Hi·ªÉn th·ªã k·∫øt qu·∫£ & th·ªëng k√™ ====


# Bi·ªÉu ƒë·ªì th·ªëng k√™ nh√≥m
st.subheader("üìä T·∫ßn su·∫•t nh√≥m A/B/C/D")
st.bar_chart(data["Nh√≥m"].value_counts())

st.subheader("üìä T·∫ßn su·∫•t t√° nh√≥m T1/T2/T3")
st.bar_chart(data["T√° nh√≥m"].value_counts())



latest_group = data["Nh√≥m"].iloc[-1]
streak = 1
for i in range(len(data) - 2, -1, -1):
    if data["Nh√≥m"].iloc[i] == latest_group:
        streak += 1
    else:
        break
least_group = data["Nh√≥m"].value_counts().idxmin()
suggested = f"{latest_group} + {least_group}" if latest_group != least_group else latest_group

st.subheader("üìä Ph√¢n t√≠ch th·ªëng k√™")
st.write(f"‚úÖ Nh√≥m g·∫ßn nh·∫•t: **{latest_group}**")
st.write(f"üìå ƒê·ªô d√†i chu·ªói li√™n ti·∫øp: **{streak} l·∫ßn**")
st.write(f"üéØ G·ª£i √Ω nh√≥m c∆∞·ª£c: **{suggested}**")

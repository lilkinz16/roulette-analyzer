import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import re

st.set_page_config(page_title="Ph√¢n T√≠ch Roulette - C·∫ßu Nh√≥m", layout="wide")
st.title("üéØ Ph√¢n T√≠ch C·∫ßu Roulette Theo 2 Ph∆∞∆°ng Ph√°p")

# ===== Nh·∫≠p nh√≥m ƒë·ªông (cho ph∆∞∆°ng ph√°p 1) =====
st.subheader("‚úèÔ∏è Thi·∫øt l·∫≠p nh√≥m s·ªë Roulette (Ph∆∞∆°ng ph√°p 1)")

group_input = {
    'A': st.text_input("Nh√≥m A:", "0, 17"),
    'B': st.text_input("Nh√≥m B:", "16, 18"),
    'C': st.text_input("Nh√≥m C:", "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20"),
    'D': st.text_input("Nh√≥m D:", "21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36"),
}

# Parse input th√†nh dict group_map
group_map = {
    group: [int(x.strip()) for x in re.findall(r'\d+', val)]
    for group, val in group_input.items()
}

# ===== H√†m x√°c ƒë·ªãnh nh√≥m =====
def find_group(num):
    for group, numbers in group_map.items():
        if num in numbers:
            return group
    return "?"

# ===== Nh·∫≠p k·∫øt qu·∫£ roulette =====
results = st.text_input("üé≤ Nh·∫≠p d√£y s·ªë Roulette (c√°ch nhau b·ªüi d·∫•u c√°ch ho·∫∑c ph·∫©y):", "0 16 17 18 19")
numbers = [int(x) for x in re.findall(r'\d+', results)]
groups = [find_group(n) for n in numbers]

# ===== B·∫£ng k·∫øt qu·∫£ nh√≥m =====
data = pd.DataFrame({
    "Tay": list(range(1, len(numbers) + 1)),
    "S·ªë": numbers,
    "Nh√≥m": groups
})

st.subheader("üìã K·∫øt qu·∫£ nh√≥m")
st.dataframe(data, use_container_width=True)

# ===== Chia giao di·ªán 2 c·ªôt =====
col1, col2 = st.columns(2)

# ===== C·ªòT 1: Theo nh√≥m ng∆∞·ªùi d√πng nh·∫≠p =====
with col1:
    st.subheader("üìä Ph∆∞∆°ng ph√°p 1: Theo nh√≥m nh·∫≠p")

    # M√†u theo nh√≥m
    group_colors = {
        'A': "#F44336",
        'B': "#2196F3",
        'C': "#4CAF50",
        'D': "#FF9800",
        '?': "#9E9E9E"
    }

    columns = []
    col = []
    last = None

    for group in groups:
        if group == last:
            col.append(group)
        else:
            if col:
                columns.append(col)
            col = [group]
            last = group
    if col:
        columns.append(col)

    max_len = max(len(c) for c in columns) if columns else 1
    fig1, ax1 = plt.subplots(figsize=(len(columns), max_len))
    ax1.axis('off')

    for x, col in enumerate(columns):
        for y, val in enumerate(col):
            color = group_colors.get(val, "#9E9E9E")
            ax1.add_patch(plt.Rectangle((x, -y), 1, 1, color=color))
            ax1.text(x + 0.5, -y + 0.5, val, va='center', ha='center', fontsize=16, color='white')

    plt.xlim(0, len(columns))
    plt.ylim(-max_len, 1)
    plt.tight_layout()
    st.pyplot(fig1)

# ===== C·ªòT 2: Theo Ch·∫µn / L·∫ª =====
with col2:
    st.subheader("üìä Ph∆∞∆°ng ph√°p 2: Ch·∫µn / L·∫ª")

    even_odd = ['Ch·∫µn' if n % 2 == 0 else 'L·∫ª' for n in numbers]

    columns2 = []
    col2 = []
    last2 = None

    for val in even_odd:
        if val == last2:
            col2.append(val)
        else:
            if col2:
                columns2.append(col2)
            col2 = [val]
            last2 = val
    if col2:
        columns2.append(col2)

    max_len2 = max(len(c) for c in columns2) if columns2 else 1
    fig2, ax2 = plt.subplots(figsize=(len(columns2), max_len2))
    ax2.axis('off')

    color_map2 = {'Ch·∫µn': "#3F51B5", 'L·∫ª': "#E91E63"}

    for x, col in enumerate(columns2):
        for y, val in enumerate(col):
            color = color_map2.get(val, "#9E9E9E")
            ax2.add_patch(plt.Rectangle((x, -y), 1, 1, color=color))
            ax2.text(x + 0.5, -y + 0.5, val, va='center', ha='center', fontsize=16, color='white')

    plt.xlim(0, len(columns2))
    plt.ylim(-max_len2, 1)
    plt.tight_layout()
    st.pyplot(fig2)
